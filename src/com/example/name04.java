package com.example;
public class name04 {
    //变量就是申请内存来存储值。也就是说，当创建变量的时候，需要在内存中申请空间
    //内存管理系统根据变量的类型为变量分配存储空间，分配的空间只能用来储存该类型数据
    //Java的两大数据类型:
    //内置数据类型
    //Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型
    //引用数据类型
    //在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了
    //对象、数组都是引用数据类型
    //所有引用类型的默认值都是null
    //一个引用变量可以用来引用任何与之兼容的类型
    //例子：Site site = new Site("Runoob")
    //Java 常量
    //常量在程序运行时是不能被修改的
    //在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似
    //final double PI = 3.1415927;
    //转义字符 /n /r
    //自动类型转换
    //整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算
    //转换从低级到高级
    //byte,short,char—> int —> long—> float —> double
    //不能对boolean类型进行类型转换
    //不能把对象类型转换成不相关类的对象
    //不能把对象类型转换成不相关类的对象
    //不能把对象类型转换成不相关类的对象
//    int i =128;
//    byte b = (byte)i;
    //浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入
//    (int)23.7 == 23;
//    (int)-45.89f == -45
    //强制类型转换
    //条件是转换的数据类型必须是兼容的
    //格式：(type)value type是要强制类型转换后的数据类型
//    int i1 = 123;
//    byte b = (byte)i1;
    //声明变量的规则
//    int a, b, c;
//    int d = 3, e = 4, f = 5;

    //Java 语言支持的变量类型有
    //局部变量
    //局部变量是在方法、构造函数或块内部声明的变量，它们在声明的方法、构造函数或块执行结束后被销毁，局部变量在声明时需要初始化，否则会导致编译错误
    //实例变量
    //实例变量是在类中声明，但在方法、构造函数或块之外，它们属于类的实例，每个类的实例都有自己的副本，如果不明确初始化，实例变量会被赋予默认值（数值类型为0，boolean类型为false，对象引用类型为null）
    //静态变量或类变量
    //类变量是在类中用 static 关键字声明的变量，它们属于类而不是实例，所有该类的实例共享同一个类变量的值，类变量在类加载时被初始化，而且只初始化一次

    //参数变量
    //参数是方法或构造函数声明中的变量，用于接收调用该方法或构造函数时传递的值，参数变量的作用域只限于方法内部
    //在调用方法时，我们必须为参数变量传递值，这些值可以是常量、变量或表达式
    //方法参数变量的值传递方式有两种：值传递和引用传递
    //值传递：在方法调用时，传递的是实际参数的值的副本
    //引用传递：在方法调用时，传递的是实际参数的引用（即内存地址）

    //局部变量是在方法、构造方法或语句块内部声明的变量，其作用域限制在声明它的代码块内部

    //成员变量（实例变量）
    //成员变量声明在一个类中，但在方法、构造方法和语句块之外

    //类变量（静态变量）
    //Java 中的静态变量是指在类中定义的一个变量，它与类相关而不是与实例相关，即无论创建多少个类实例，静态变量在内存中只有一份拷贝，被所有实例共享
    //静态变量在类加载时被创建，在整个程序运行期间都存在
}
