package com.example;

/**
 * 位运算
 * &按位与 |按位或 ^按位异或 ~按位取反 >> << >>>
 * 按位与&：两位全为1，结果为1，否则为0
 * 1011 & 0110 = 0010
 * 按位或|：两位有一个为1，结果为1，否则为0
 * 按位异或^：两位一个为0，一个为1，结果为1，否则为0
 * 按位取反~：0->1 1->0
 */
public class day12 {
    public static void main(String[] args) {
        //算数右移>>：低位溢出，符号位不变，并用符号位补溢出的高位
        //算术左移<<：符号位不变，低位补0
        //>>>逻辑右移也叫无符号右移，低位溢出，高位补0
        //没有<<<符号
        int a = 1>>2;//本质1/2/2
        int b = -1>>2;
        int c = 1<<2;//本质1*2*2
        int d = -1<<2;
        int e = 3>>>2;
        System.out.println(a);
        System.out.println(b);
        System.out.println(c);
        System.out.println(d);
        System.out.println(e);

        //二进制是逢2进位的进位制，0、1是基本算符
        //原码、反码、补码
        /*
        1.二进制的最高位是符号位，0表示正数，1表示负数（0->0 1->-）
        2.正数的原码，反码，补码都一样
        3.负数的反码=它的原码符号位不变，其它位取反（0->1 1->0）
        4.负数的补码=它的反码+1，负数的反码=负数的补码-1
        5.0的反码，补码都是0
        6.java没有无符号数
        7.在计算机运算的时候，都是以补码的方式来运算的
        8.当我们看运算结果的时候，要看它的原码
         */

        //先得到2的补码，等价于先得到2的原码=00000000 00000000 00000000 00000010【int类型占4个字节=8bit】
        //2的补码=2的原码【正数三码合一】
        //3的补码，等价于先得到3的原码=00000000 00000000 00000000 00000011
        //3的补码=3的原码【正数三码合一】
        //00000000 00000000 00000000 00000010
        //00000000 00000000 00000000 00000011
        //运算后的补码：00000000 00000000 00000000 00000010
        //运算后的原码：00000000 00000000 00000000 00000010
        //最后二进制转十进制，所以结果等于2
        System.out.println(2&3);

        //先得到-2的原码=10000000 00000000 00000000 00000010
        //再得到-2的反码=11111111 11111111 11111111 11111101
        //得出-2的补码=11111111 11111111 11111111 11111110
        //然后计算取反=00000000 00000000 00000000 00000001
        //最后转原码=00000000 00000000 00000000 00000001
        //结果二进制转十进制，所以等于1
        System.out.println(~-2);

    }
}
